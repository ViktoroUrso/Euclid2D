'''
Рекомендации:
шаблон названия теста - Название_функциональности_Tests
шаблон названия метода - [Тестируемый метод]_[Сценарий]_[Ожидаемое поведение]

Делаем тестирование:
    - сложного кода без зависимостей (алгоритмы, бизнес-логика и т.п.)
    - не очень сложный код с зависимостями (обычно связь разных компонентов)

Не делаем тестирование:
    - простой код без зависимостей (зачем его тестировать?)
    - сложный код с большим количеством зависимостей
	(сильная связанность, God Object)

Используем подход ААА при написании метода:
class CalculatorTests
{
	public void Sum_2Plus5_7Returned()
	{
		// arrange
		var calc = new Calculator();
	
		// act
		var res = calc.Sum(2,5);

		// assert
		Assert.AreEqual(7, res);	
	}
}    

Тестируйте одну вещь за один раз

Тестирование состояния и тестирование поведения
Почему важно понимать, казалось бы, незначительную разницу между моками и стабами? Давайте представим, что нам нужно протестировать автоматическую систему полива. Можно подойти к этой задаче двумя способами:

Тестирование состояния
Запускаем цикл (12 часов). И через 12 часов проверяем, хорошо ли политы растения, достаточно ли воды, каково состояние почвы и т.д.

Тестирование взаимодействия
Установим датчики, которые будут засекать, когда полив начался и закончился, и сколько воды поступило из системы.
Стабы используются при тестировании состояния, а моки – взаимодействия. Лучше использовать не более одного мока на тест. Иначе с высокой вероятностью вы нарушите принцип «тестировать только одну вещь». При этом в одном тесте может быть сколько угодно стабов или же мок и стабы.
'''

